name: .NET Build

on:
 push:
  branches:
   - main
 workflow_dispatch:

jobs:
 build-and-publish:
  
  runs-on: ubuntu-latest
  
  env:
   VERSION: 1.0.${{ github.run_number }}
   NUGET_FILE: "**/*PageMaster*.nupkg"
  
  steps:

   - name: Checkout repository
     uses: actions/checkout@v4.1.1

   - name: Setup .NET
     uses: actions/setup-dotnet@v2
     with:
      dotnet-version: 8.0.x

   - name: Set up JDK 17
     uses: actions/setup-java@v3
     with:
      java-version: 17
      distribution: 'zulu'

   - name: Restore dependencies
     run: dotnet restore source/

   - name: Cache SonarCloud packages
     uses: actions/cache@v3
     with:
      path: ~\sonar\cache
      key: ${{ runner.os }}-sonar
      restore-keys: ${{ runner.os }}-sonar

   - name: Cache SonarCloud scanner
     id: cache-sonar-scanner
     uses: actions/cache@v3
     with:
      path: .\.sonar\scanner
      key: ${{ runner.os }}-sonar-scanner
      restore-keys: ${{ runner.os }}-sonar-scanner

   - name: Install SonarCloud scanner
     if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
     shell: pwsh
     run: |
      New-Item -Path .\.sonar\scanner -ItemType Directory
      dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

   - name: Start Analyze
     env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
     shell: pwsh
     run: |
      .\.sonar\scanner\dotnet-sonarscanner begin /k:"lk-code_PageMaster" /o:"lk-code-github" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" 

   - name: Build
     shell: pwsh
     run: |
      dotnet build --configuration Release --no-restore -p:PackageVersion=${{ env.VERSION }} source/

   - name: Finish Analyze
     env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
     shell: pwsh
     run: |
      .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

   - name: Set Version Git Tag
     run: |
      git tag ${{ env.VERSION }}
      git push origin ${{ env.VERSION }}

   - name: Upload Build Artifact
     uses: actions/upload-artifact@v3.1.2
     with:
      name: ${{ env.VERSION }}
      path: "**/*.${{ env.VERSION }}.nupkg"

   - name: Publish
     run: dotnet nuget push "**/*.${{ env.VERSION }}.nupkg" --no-symbols --skip-duplicate --api-key ${{ secrets.NUGET_API_KEY }} --source "nuget.org"
      
